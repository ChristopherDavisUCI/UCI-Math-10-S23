import numpy as np
import pandas as pd
import altair as alt

df_full = pd.read_csv("sim_data.csv")

c = alt.Chart(df_full).mark_circle().encode(
    x="x",
    y=alt.Y("y", scale=alt.Scale(domain=(-100,200)))
)

c

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

poly = PolynomialFeatures(degree=3)

poly.fit([1,2,3])

poly.fit([[1],[2],[3]])

poly.transform([[1],[2],[3]])

poly = PolynomialFeatures(degree=10, include_bias=False)

poly.fit(df_full[["x"]])

poly_output = poly.transform(df_full[["x"]])

poly_output.shape

df_full.shape

reg = LinearRegression()

reg.fit(poly_output, df_full["y"])

df_full["y_pred"] = reg.predict(poly_output)

c1 = alt.Chart(df_full).mark_line(color="red").encode(
    x="x",
    y=alt.Y("y_pred", scale=alt.Scale(domain=(-100,200)))
)

c+c1

reg.coef_

from sklearn.pipeline import Pipeline

pipe = Pipeline(
    [
        ("poly", PolynomialFeatures(degree=10, include_bias=False)),
        ("reg" , LinearRegression())
    ]
)

pipe.fit(df_full[["x"]], df_full["y"])

pipe.predict(df_full[["x"]])[:10]

results = []

for i in range(8):
    df = df_full.sample(50, random_state=i)
    pipe.fit(df[["x"]], df["y"])
    df_plot = pd.DataFrame({"x": np.arange(-8,8,0.1)})
    df_plot["y_pred"] = pipe.predict(df_plot[["x"]])
    df_plot["random_state"] = i
    results.append(df_plot)

results[3]

df_plot2 = pd.concat(results, axis=0)

c1 = alt.Chart(df_plot2).mark_line().encode(
    x="x",
    y=alt.Y("y_pred", scale=alt.Scale(domain=(-100,200))),
    color="random_state:N"
)

c+c1

from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df_full[["x"]], df_full["y"], random_state=0, train_size=50)

train_error = []
test_error = []

for d in range(1,30):
    pipe = Pipeline(
        [
            ("poly", PolynomialFeatures(degree=d, include_bias=False)),
            ("reg" , LinearRegression())
        ]
    )
    pipe.fit(X_train, y_train)
    train_error.append(mean_squared_error(y_train, pipe.predict(X_train)))
    test_error.append(mean_squared_error(y_test, pipe.predict(X_test)))

train_error[:5]

test_error[:5]

from matplotlib import pyplot as plt

fig, ax = plt.subplots()
ax.plot(train_error[:10])
ax.plot(test_error[:10])

fig, ax = plt.subplots()
ax.plot(train_error[:20])
ax.plot(test_error[:20])

fig, ax = plt.subplots()
ax.plot(train_error)
ax.plot(test_error)
